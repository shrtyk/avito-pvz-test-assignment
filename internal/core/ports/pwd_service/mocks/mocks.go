// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package pwdservicemocks

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockPasswordService creates a new instance of MockPasswordService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPasswordService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPasswordService {
	mock := &MockPasswordService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockPasswordService is an autogenerated mock type for the PasswordService type
type MockPasswordService struct {
	mock.Mock
}

type MockPasswordService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPasswordService) EXPECT() *MockPasswordService_Expecter {
	return &MockPasswordService_Expecter{mock: &_m.Mock}
}

// Compare provides a mock function for the type MockPasswordService
func (_mock *MockPasswordService) Compare(hashedPwd []byte, plainPwd string) (bool, error) {
	ret := _mock.Called(hashedPwd, plainPwd)

	if len(ret) == 0 {
		panic("no return value specified for Compare")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func([]byte, string) (bool, error)); ok {
		return returnFunc(hashedPwd, plainPwd)
	}
	if returnFunc, ok := ret.Get(0).(func([]byte, string) bool); ok {
		r0 = returnFunc(hashedPwd, plainPwd)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func([]byte, string) error); ok {
		r1 = returnFunc(hashedPwd, plainPwd)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPasswordService_Compare_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Compare'
type MockPasswordService_Compare_Call struct {
	*mock.Call
}

// Compare is a helper method to define mock.On call
//   - hashedPwd []byte
//   - plainPwd string
func (_e *MockPasswordService_Expecter) Compare(hashedPwd interface{}, plainPwd interface{}) *MockPasswordService_Compare_Call {
	return &MockPasswordService_Compare_Call{Call: _e.mock.On("Compare", hashedPwd, plainPwd)}
}

func (_c *MockPasswordService_Compare_Call) Run(run func(hashedPwd []byte, plainPwd string)) *MockPasswordService_Compare_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []byte
		if args[0] != nil {
			arg0 = args[0].([]byte)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockPasswordService_Compare_Call) Return(b bool, err error) *MockPasswordService_Compare_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockPasswordService_Compare_Call) RunAndReturn(run func(hashedPwd []byte, plainPwd string) (bool, error)) *MockPasswordService_Compare_Call {
	_c.Call.Return(run)
	return _c
}

// Hash provides a mock function for the type MockPasswordService
func (_mock *MockPasswordService) Hash(plainPwd string) ([]byte, error) {
	ret := _mock.Called(plainPwd)

	if len(ret) == 0 {
		panic("no return value specified for Hash")
	}

	var r0 []byte
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) ([]byte, error)); ok {
		return returnFunc(plainPwd)
	}
	if returnFunc, ok := ret.Get(0).(func(string) []byte); ok {
		r0 = returnFunc(plainPwd)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(plainPwd)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPasswordService_Hash_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Hash'
type MockPasswordService_Hash_Call struct {
	*mock.Call
}

// Hash is a helper method to define mock.On call
//   - plainPwd string
func (_e *MockPasswordService_Expecter) Hash(plainPwd interface{}) *MockPasswordService_Hash_Call {
	return &MockPasswordService_Hash_Call{Call: _e.mock.On("Hash", plainPwd)}
}

func (_c *MockPasswordService_Hash_Call) Run(run func(plainPwd string)) *MockPasswordService_Hash_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockPasswordService_Hash_Call) Return(bytes []byte, err error) *MockPasswordService_Hash_Call {
	_c.Call.Return(bytes, err)
	return _c
}

func (_c *MockPasswordService_Hash_Call) RunAndReturn(run func(plainPwd string) ([]byte, error)) *MockPasswordService_Hash_Call {
	_c.Call.Return(run)
	return _c
}
