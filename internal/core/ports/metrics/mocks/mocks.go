// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package metricsmocks

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockCollector creates a new instance of MockCollector. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCollector(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCollector {
	mock := &MockCollector{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockCollector is an autogenerated mock type for the Collector type
type MockCollector struct {
	mock.Mock
}

type MockCollector_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCollector) EXPECT() *MockCollector_Expecter {
	return &MockCollector_Expecter{mock: &_m.Mock}
}

// IncHTTPRequestsTotal provides a mock function for the type MockCollector
func (_mock *MockCollector) IncHTTPRequestsTotal(method string, code string) {
	_mock.Called(method, code)
	return
}

// MockCollector_IncHTTPRequestsTotal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IncHTTPRequestsTotal'
type MockCollector_IncHTTPRequestsTotal_Call struct {
	*mock.Call
}

// IncHTTPRequestsTotal is a helper method to define mock.On call
//   - method string
//   - code string
func (_e *MockCollector_Expecter) IncHTTPRequestsTotal(method interface{}, code interface{}) *MockCollector_IncHTTPRequestsTotal_Call {
	return &MockCollector_IncHTTPRequestsTotal_Call{Call: _e.mock.On("IncHTTPRequestsTotal", method, code)}
}

func (_c *MockCollector_IncHTTPRequestsTotal_Call) Run(run func(method string, code string)) *MockCollector_IncHTTPRequestsTotal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockCollector_IncHTTPRequestsTotal_Call) Return() *MockCollector_IncHTTPRequestsTotal_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockCollector_IncHTTPRequestsTotal_Call) RunAndReturn(run func(method string, code string)) *MockCollector_IncHTTPRequestsTotal_Call {
	_c.Run(run)
	return _c
}

// IncPVZsCreated provides a mock function for the type MockCollector
func (_mock *MockCollector) IncPVZsCreated() {
	_mock.Called()
	return
}

// MockCollector_IncPVZsCreated_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IncPVZsCreated'
type MockCollector_IncPVZsCreated_Call struct {
	*mock.Call
}

// IncPVZsCreated is a helper method to define mock.On call
func (_e *MockCollector_Expecter) IncPVZsCreated() *MockCollector_IncPVZsCreated_Call {
	return &MockCollector_IncPVZsCreated_Call{Call: _e.mock.On("IncPVZsCreated")}
}

func (_c *MockCollector_IncPVZsCreated_Call) Run(run func()) *MockCollector_IncPVZsCreated_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCollector_IncPVZsCreated_Call) Return() *MockCollector_IncPVZsCreated_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockCollector_IncPVZsCreated_Call) RunAndReturn(run func()) *MockCollector_IncPVZsCreated_Call {
	_c.Run(run)
	return _c
}

// IncProductsAdded provides a mock function for the type MockCollector
func (_mock *MockCollector) IncProductsAdded() {
	_mock.Called()
	return
}

// MockCollector_IncProductsAdded_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IncProductsAdded'
type MockCollector_IncProductsAdded_Call struct {
	*mock.Call
}

// IncProductsAdded is a helper method to define mock.On call
func (_e *MockCollector_Expecter) IncProductsAdded() *MockCollector_IncProductsAdded_Call {
	return &MockCollector_IncProductsAdded_Call{Call: _e.mock.On("IncProductsAdded")}
}

func (_c *MockCollector_IncProductsAdded_Call) Run(run func()) *MockCollector_IncProductsAdded_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCollector_IncProductsAdded_Call) Return() *MockCollector_IncProductsAdded_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockCollector_IncProductsAdded_Call) RunAndReturn(run func()) *MockCollector_IncProductsAdded_Call {
	_c.Run(run)
	return _c
}

// IncReceptionsCreated provides a mock function for the type MockCollector
func (_mock *MockCollector) IncReceptionsCreated() {
	_mock.Called()
	return
}

// MockCollector_IncReceptionsCreated_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IncReceptionsCreated'
type MockCollector_IncReceptionsCreated_Call struct {
	*mock.Call
}

// IncReceptionsCreated is a helper method to define mock.On call
func (_e *MockCollector_Expecter) IncReceptionsCreated() *MockCollector_IncReceptionsCreated_Call {
	return &MockCollector_IncReceptionsCreated_Call{Call: _e.mock.On("IncReceptionsCreated")}
}

func (_c *MockCollector_IncReceptionsCreated_Call) Run(run func()) *MockCollector_IncReceptionsCreated_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCollector_IncReceptionsCreated_Call) Return() *MockCollector_IncReceptionsCreated_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockCollector_IncReceptionsCreated_Call) RunAndReturn(run func()) *MockCollector_IncReceptionsCreated_Call {
	_c.Run(run)
	return _c
}

// ObserveHTTPRequestDuration provides a mock function for the type MockCollector
func (_mock *MockCollector) ObserveHTTPRequestDuration(method string, duration float64) {
	_mock.Called(method, duration)
	return
}

// MockCollector_ObserveHTTPRequestDuration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ObserveHTTPRequestDuration'
type MockCollector_ObserveHTTPRequestDuration_Call struct {
	*mock.Call
}

// ObserveHTTPRequestDuration is a helper method to define mock.On call
//   - method string
//   - duration float64
func (_e *MockCollector_Expecter) ObserveHTTPRequestDuration(method interface{}, duration interface{}) *MockCollector_ObserveHTTPRequestDuration_Call {
	return &MockCollector_ObserveHTTPRequestDuration_Call{Call: _e.mock.On("ObserveHTTPRequestDuration", method, duration)}
}

func (_c *MockCollector_ObserveHTTPRequestDuration_Call) Run(run func(method string, duration float64)) *MockCollector_ObserveHTTPRequestDuration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 float64
		if args[1] != nil {
			arg1 = args[1].(float64)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockCollector_ObserveHTTPRequestDuration_Call) Return() *MockCollector_ObserveHTTPRequestDuration_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockCollector_ObserveHTTPRequestDuration_Call) RunAndReturn(run func(method string, duration float64)) *MockCollector_ObserveHTTPRequestDuration_Call {
	_c.Run(run)
	return _c
}
