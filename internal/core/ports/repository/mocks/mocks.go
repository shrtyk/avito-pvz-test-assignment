// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package repositorymocks

import (
	"context"

	"github.com/google/uuid"
	"github.com/shrtyk/avito-pvz-test-assignment/internal/core/domain"
	"github.com/shrtyk/avito-pvz-test-assignment/internal/core/domain/auth"
	mock "github.com/stretchr/testify/mock"
)

// NewMockRepository creates a new instance of MockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRepository {
	mock := &MockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

type MockRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRepository) EXPECT() *MockRepository_Expecter {
	return &MockRepository_Expecter{mock: &_m.Mock}
}

// CloseReceptionInPvz provides a mock function for the type MockRepository
func (_mock *MockRepository) CloseReceptionInPvz(ctx context.Context, pvzId *uuid.UUID) error {
	ret := _mock.Called(ctx, pvzId)

	if len(ret) == 0 {
		panic("no return value specified for CloseReceptionInPvz")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *uuid.UUID) error); ok {
		r0 = returnFunc(ctx, pvzId)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRepository_CloseReceptionInPvz_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CloseReceptionInPvz'
type MockRepository_CloseReceptionInPvz_Call struct {
	*mock.Call
}

// CloseReceptionInPvz is a helper method to define mock.On call
//   - ctx context.Context
//   - pvzId *uuid.UUID
func (_e *MockRepository_Expecter) CloseReceptionInPvz(ctx interface{}, pvzId interface{}) *MockRepository_CloseReceptionInPvz_Call {
	return &MockRepository_CloseReceptionInPvz_Call{Call: _e.mock.On("CloseReceptionInPvz", ctx, pvzId)}
}

func (_c *MockRepository_CloseReceptionInPvz_Call) Run(run func(ctx context.Context, pvzId *uuid.UUID)) *MockRepository_CloseReceptionInPvz_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(*uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRepository_CloseReceptionInPvz_Call) Return(err error) *MockRepository_CloseReceptionInPvz_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRepository_CloseReceptionInPvz_Call) RunAndReturn(run func(ctx context.Context, pvzId *uuid.UUID) error) *MockRepository_CloseReceptionInPvz_Call {
	_c.Call.Return(run)
	return _c
}

// CreatePVZ provides a mock function for the type MockRepository
func (_mock *MockRepository) CreatePVZ(ctx context.Context, pvz *domain.Pvz) (*domain.Pvz, error) {
	ret := _mock.Called(ctx, pvz)

	if len(ret) == 0 {
		panic("no return value specified for CreatePVZ")
	}

	var r0 *domain.Pvz
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *domain.Pvz) (*domain.Pvz, error)); ok {
		return returnFunc(ctx, pvz)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *domain.Pvz) *domain.Pvz); ok {
		r0 = returnFunc(ctx, pvz)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Pvz)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *domain.Pvz) error); ok {
		r1 = returnFunc(ctx, pvz)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_CreatePVZ_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePVZ'
type MockRepository_CreatePVZ_Call struct {
	*mock.Call
}

// CreatePVZ is a helper method to define mock.On call
//   - ctx context.Context
//   - pvz *domain.Pvz
func (_e *MockRepository_Expecter) CreatePVZ(ctx interface{}, pvz interface{}) *MockRepository_CreatePVZ_Call {
	return &MockRepository_CreatePVZ_Call{Call: _e.mock.On("CreatePVZ", ctx, pvz)}
}

func (_c *MockRepository_CreatePVZ_Call) Run(run func(ctx context.Context, pvz *domain.Pvz)) *MockRepository_CreatePVZ_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *domain.Pvz
		if args[1] != nil {
			arg1 = args[1].(*domain.Pvz)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRepository_CreatePVZ_Call) Return(pvz1 *domain.Pvz, err error) *MockRepository_CreatePVZ_Call {
	_c.Call.Return(pvz1, err)
	return _c
}

func (_c *MockRepository_CreatePVZ_Call) RunAndReturn(run func(ctx context.Context, pvz *domain.Pvz) (*domain.Pvz, error)) *MockRepository_CreatePVZ_Call {
	_c.Call.Return(run)
	return _c
}

// CreateProduct provides a mock function for the type MockRepository
func (_mock *MockRepository) CreateProduct(ctx context.Context, prod *domain.Product) (*domain.Product, error) {
	ret := _mock.Called(ctx, prod)

	if len(ret) == 0 {
		panic("no return value specified for CreateProduct")
	}

	var r0 *domain.Product
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *domain.Product) (*domain.Product, error)); ok {
		return returnFunc(ctx, prod)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *domain.Product) *domain.Product); ok {
		r0 = returnFunc(ctx, prod)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Product)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *domain.Product) error); ok {
		r1 = returnFunc(ctx, prod)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_CreateProduct_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateProduct'
type MockRepository_CreateProduct_Call struct {
	*mock.Call
}

// CreateProduct is a helper method to define mock.On call
//   - ctx context.Context
//   - prod *domain.Product
func (_e *MockRepository_Expecter) CreateProduct(ctx interface{}, prod interface{}) *MockRepository_CreateProduct_Call {
	return &MockRepository_CreateProduct_Call{Call: _e.mock.On("CreateProduct", ctx, prod)}
}

func (_c *MockRepository_CreateProduct_Call) Run(run func(ctx context.Context, prod *domain.Product)) *MockRepository_CreateProduct_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *domain.Product
		if args[1] != nil {
			arg1 = args[1].(*domain.Product)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRepository_CreateProduct_Call) Return(product *domain.Product, err error) *MockRepository_CreateProduct_Call {
	_c.Call.Return(product, err)
	return _c
}

func (_c *MockRepository_CreateProduct_Call) RunAndReturn(run func(ctx context.Context, prod *domain.Product) (*domain.Product, error)) *MockRepository_CreateProduct_Call {
	_c.Call.Return(run)
	return _c
}

// CreateReception provides a mock function for the type MockRepository
func (_mock *MockRepository) CreateReception(ctx context.Context, rec *domain.Reception) (*domain.Reception, error) {
	ret := _mock.Called(ctx, rec)

	if len(ret) == 0 {
		panic("no return value specified for CreateReception")
	}

	var r0 *domain.Reception
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *domain.Reception) (*domain.Reception, error)); ok {
		return returnFunc(ctx, rec)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *domain.Reception) *domain.Reception); ok {
		r0 = returnFunc(ctx, rec)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Reception)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *domain.Reception) error); ok {
		r1 = returnFunc(ctx, rec)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_CreateReception_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateReception'
type MockRepository_CreateReception_Call struct {
	*mock.Call
}

// CreateReception is a helper method to define mock.On call
//   - ctx context.Context
//   - rec *domain.Reception
func (_e *MockRepository_Expecter) CreateReception(ctx interface{}, rec interface{}) *MockRepository_CreateReception_Call {
	return &MockRepository_CreateReception_Call{Call: _e.mock.On("CreateReception", ctx, rec)}
}

func (_c *MockRepository_CreateReception_Call) Run(run func(ctx context.Context, rec *domain.Reception)) *MockRepository_CreateReception_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *domain.Reception
		if args[1] != nil {
			arg1 = args[1].(*domain.Reception)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRepository_CreateReception_Call) Return(reception *domain.Reception, err error) *MockRepository_CreateReception_Call {
	_c.Call.Return(reception, err)
	return _c
}

func (_c *MockRepository_CreateReception_Call) RunAndReturn(run func(ctx context.Context, rec *domain.Reception) (*domain.Reception, error)) *MockRepository_CreateReception_Call {
	_c.Call.Return(run)
	return _c
}

// CreateUser provides a mock function for the type MockRepository
func (_mock *MockRepository) CreateUser(ctx context.Context, user *auth.User) (*auth.User, error) {
	ret := _mock.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 *auth.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *auth.User) (*auth.User, error)); ok {
		return returnFunc(ctx, user)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *auth.User) *auth.User); ok {
		r0 = returnFunc(ctx, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *auth.User) error); ok {
		r1 = returnFunc(ctx, user)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type MockRepository_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - user *auth.User
func (_e *MockRepository_Expecter) CreateUser(ctx interface{}, user interface{}) *MockRepository_CreateUser_Call {
	return &MockRepository_CreateUser_Call{Call: _e.mock.On("CreateUser", ctx, user)}
}

func (_c *MockRepository_CreateUser_Call) Run(run func(ctx context.Context, user *auth.User)) *MockRepository_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *auth.User
		if args[1] != nil {
			arg1 = args[1].(*auth.User)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRepository_CreateUser_Call) Return(user1 *auth.User, err error) *MockRepository_CreateUser_Call {
	_c.Call.Return(user1, err)
	return _c
}

func (_c *MockRepository_CreateUser_Call) RunAndReturn(run func(ctx context.Context, user *auth.User) (*auth.User, error)) *MockRepository_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteLastProduct provides a mock function for the type MockRepository
func (_mock *MockRepository) DeleteLastProduct(ctx context.Context, pvzId *uuid.UUID) error {
	ret := _mock.Called(ctx, pvzId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteLastProduct")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *uuid.UUID) error); ok {
		r0 = returnFunc(ctx, pvzId)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRepository_DeleteLastProduct_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteLastProduct'
type MockRepository_DeleteLastProduct_Call struct {
	*mock.Call
}

// DeleteLastProduct is a helper method to define mock.On call
//   - ctx context.Context
//   - pvzId *uuid.UUID
func (_e *MockRepository_Expecter) DeleteLastProduct(ctx interface{}, pvzId interface{}) *MockRepository_DeleteLastProduct_Call {
	return &MockRepository_DeleteLastProduct_Call{Call: _e.mock.On("DeleteLastProduct", ctx, pvzId)}
}

func (_c *MockRepository_DeleteLastProduct_Call) Run(run func(ctx context.Context, pvzId *uuid.UUID)) *MockRepository_DeleteLastProduct_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(*uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRepository_DeleteLastProduct_Call) Return(err error) *MockRepository_DeleteLastProduct_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRepository_DeleteLastProduct_Call) RunAndReturn(run func(ctx context.Context, pvzId *uuid.UUID) error) *MockRepository_DeleteLastProduct_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllPvzs provides a mock function for the type MockRepository
func (_mock *MockRepository) GetAllPvzs(ctx context.Context) ([]*domain.Pvz, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllPvzs")
	}

	var r0 []*domain.Pvz
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]*domain.Pvz, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []*domain.Pvz); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Pvz)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_GetAllPvzs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllPvzs'
type MockRepository_GetAllPvzs_Call struct {
	*mock.Call
}

// GetAllPvzs is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockRepository_Expecter) GetAllPvzs(ctx interface{}) *MockRepository_GetAllPvzs_Call {
	return &MockRepository_GetAllPvzs_Call{Call: _e.mock.On("GetAllPvzs", ctx)}
}

func (_c *MockRepository_GetAllPvzs_Call) Run(run func(ctx context.Context)) *MockRepository_GetAllPvzs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockRepository_GetAllPvzs_Call) Return(pvzs []*domain.Pvz, err error) *MockRepository_GetAllPvzs_Call {
	_c.Call.Return(pvzs, err)
	return _c
}

func (_c *MockRepository_GetAllPvzs_Call) RunAndReturn(run func(ctx context.Context) ([]*domain.Pvz, error)) *MockRepository_GetAllPvzs_Call {
	_c.Call.Return(run)
	return _c
}

// GetPvzsData provides a mock function for the type MockRepository
func (_mock *MockRepository) GetPvzsData(ctx context.Context, params *domain.PvzsReadParams) ([]*domain.PvzReceptions, error) {
	ret := _mock.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for GetPvzsData")
	}

	var r0 []*domain.PvzReceptions
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *domain.PvzsReadParams) ([]*domain.PvzReceptions, error)); ok {
		return returnFunc(ctx, params)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *domain.PvzsReadParams) []*domain.PvzReceptions); ok {
		r0 = returnFunc(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.PvzReceptions)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *domain.PvzsReadParams) error); ok {
		r1 = returnFunc(ctx, params)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_GetPvzsData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPvzsData'
type MockRepository_GetPvzsData_Call struct {
	*mock.Call
}

// GetPvzsData is a helper method to define mock.On call
//   - ctx context.Context
//   - params *domain.PvzsReadParams
func (_e *MockRepository_Expecter) GetPvzsData(ctx interface{}, params interface{}) *MockRepository_GetPvzsData_Call {
	return &MockRepository_GetPvzsData_Call{Call: _e.mock.On("GetPvzsData", ctx, params)}
}

func (_c *MockRepository_GetPvzsData_Call) Run(run func(ctx context.Context, params *domain.PvzsReadParams)) *MockRepository_GetPvzsData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *domain.PvzsReadParams
		if args[1] != nil {
			arg1 = args[1].(*domain.PvzsReadParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRepository_GetPvzsData_Call) Return(pvzReceptionss []*domain.PvzReceptions, err error) *MockRepository_GetPvzsData_Call {
	_c.Call.Return(pvzReceptionss, err)
	return _c
}

func (_c *MockRepository_GetPvzsData_Call) RunAndReturn(run func(ctx context.Context, params *domain.PvzsReadParams) ([]*domain.PvzReceptions, error)) *MockRepository_GetPvzsData_Call {
	_c.Call.Return(run)
	return _c
}

// SaveRefreshToken provides a mock function for the type MockRepository
func (_mock *MockRepository) SaveRefreshToken(ctx context.Context, rToken *auth.RefreshToken) error {
	ret := _mock.Called(ctx, rToken)

	if len(ret) == 0 {
		panic("no return value specified for SaveRefreshToken")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *auth.RefreshToken) error); ok {
		r0 = returnFunc(ctx, rToken)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRepository_SaveRefreshToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveRefreshToken'
type MockRepository_SaveRefreshToken_Call struct {
	*mock.Call
}

// SaveRefreshToken is a helper method to define mock.On call
//   - ctx context.Context
//   - rToken *auth.RefreshToken
func (_e *MockRepository_Expecter) SaveRefreshToken(ctx interface{}, rToken interface{}) *MockRepository_SaveRefreshToken_Call {
	return &MockRepository_SaveRefreshToken_Call{Call: _e.mock.On("SaveRefreshToken", ctx, rToken)}
}

func (_c *MockRepository_SaveRefreshToken_Call) Run(run func(ctx context.Context, rToken *auth.RefreshToken)) *MockRepository_SaveRefreshToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *auth.RefreshToken
		if args[1] != nil {
			arg1 = args[1].(*auth.RefreshToken)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRepository_SaveRefreshToken_Call) Return(err error) *MockRepository_SaveRefreshToken_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRepository_SaveRefreshToken_Call) RunAndReturn(run func(ctx context.Context, rToken *auth.RefreshToken) error) *MockRepository_SaveRefreshToken_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUserRefreshToken provides a mock function for the type MockRepository
func (_mock *MockRepository) UpdateUserRefreshToken(ctx context.Context, usedHash []byte, newToken *auth.RefreshToken) error {
	ret := _mock.Called(ctx, usedHash, newToken)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserRefreshToken")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []byte, *auth.RefreshToken) error); ok {
		r0 = returnFunc(ctx, usedHash, newToken)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRepository_UpdateUserRefreshToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUserRefreshToken'
type MockRepository_UpdateUserRefreshToken_Call struct {
	*mock.Call
}

// UpdateUserRefreshToken is a helper method to define mock.On call
//   - ctx context.Context
//   - usedHash []byte
//   - newToken *auth.RefreshToken
func (_e *MockRepository_Expecter) UpdateUserRefreshToken(ctx interface{}, usedHash interface{}, newToken interface{}) *MockRepository_UpdateUserRefreshToken_Call {
	return &MockRepository_UpdateUserRefreshToken_Call{Call: _e.mock.On("UpdateUserRefreshToken", ctx, usedHash, newToken)}
}

func (_c *MockRepository_UpdateUserRefreshToken_Call) Run(run func(ctx context.Context, usedHash []byte, newToken *auth.RefreshToken)) *MockRepository_UpdateUserRefreshToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []byte
		if args[1] != nil {
			arg1 = args[1].([]byte)
		}
		var arg2 *auth.RefreshToken
		if args[2] != nil {
			arg2 = args[2].(*auth.RefreshToken)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockRepository_UpdateUserRefreshToken_Call) Return(err error) *MockRepository_UpdateUserRefreshToken_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRepository_UpdateUserRefreshToken_Call) RunAndReturn(run func(ctx context.Context, usedHash []byte, newToken *auth.RefreshToken) error) *MockRepository_UpdateUserRefreshToken_Call {
	_c.Call.Return(run)
	return _c
}

// UserByEmail provides a mock function for the type MockRepository
func (_mock *MockRepository) UserByEmail(ctx context.Context, email string) (*auth.User, error) {
	ret := _mock.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for UserByEmail")
	}

	var r0 *auth.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*auth.User, error)); ok {
		return returnFunc(ctx, email)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *auth.User); ok {
		r0 = returnFunc(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, email)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_UserByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UserByEmail'
type MockRepository_UserByEmail_Call struct {
	*mock.Call
}

// UserByEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *MockRepository_Expecter) UserByEmail(ctx interface{}, email interface{}) *MockRepository_UserByEmail_Call {
	return &MockRepository_UserByEmail_Call{Call: _e.mock.On("UserByEmail", ctx, email)}
}

func (_c *MockRepository_UserByEmail_Call) Run(run func(ctx context.Context, email string)) *MockRepository_UserByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRepository_UserByEmail_Call) Return(user *auth.User, err error) *MockRepository_UserByEmail_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockRepository_UserByEmail_Call) RunAndReturn(run func(ctx context.Context, email string) (*auth.User, error)) *MockRepository_UserByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// UserRoleAndRefreshToken provides a mock function for the type MockRepository
func (_mock *MockRepository) UserRoleAndRefreshToken(ctx context.Context, tokenHash []byte) (*auth.UserRoleAndRToken, error) {
	ret := _mock.Called(ctx, tokenHash)

	if len(ret) == 0 {
		panic("no return value specified for UserRoleAndRefreshToken")
	}

	var r0 *auth.UserRoleAndRToken
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []byte) (*auth.UserRoleAndRToken, error)); ok {
		return returnFunc(ctx, tokenHash)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []byte) *auth.UserRoleAndRToken); ok {
		r0 = returnFunc(ctx, tokenHash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth.UserRoleAndRToken)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []byte) error); ok {
		r1 = returnFunc(ctx, tokenHash)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_UserRoleAndRefreshToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UserRoleAndRefreshToken'
type MockRepository_UserRoleAndRefreshToken_Call struct {
	*mock.Call
}

// UserRoleAndRefreshToken is a helper method to define mock.On call
//   - ctx context.Context
//   - tokenHash []byte
func (_e *MockRepository_Expecter) UserRoleAndRefreshToken(ctx interface{}, tokenHash interface{}) *MockRepository_UserRoleAndRefreshToken_Call {
	return &MockRepository_UserRoleAndRefreshToken_Call{Call: _e.mock.On("UserRoleAndRefreshToken", ctx, tokenHash)}
}

func (_c *MockRepository_UserRoleAndRefreshToken_Call) Run(run func(ctx context.Context, tokenHash []byte)) *MockRepository_UserRoleAndRefreshToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []byte
		if args[1] != nil {
			arg1 = args[1].([]byte)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRepository_UserRoleAndRefreshToken_Call) Return(userRoleAndRToken *auth.UserRoleAndRToken, err error) *MockRepository_UserRoleAndRefreshToken_Call {
	_c.Call.Return(userRoleAndRToken, err)
	return _c
}

func (_c *MockRepository_UserRoleAndRefreshToken_Call) RunAndReturn(run func(ctx context.Context, tokenHash []byte) (*auth.UserRoleAndRToken, error)) *MockRepository_UserRoleAndRefreshToken_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPvzsRepo creates a new instance of MockPvzsRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPvzsRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPvzsRepo {
	mock := &MockPvzsRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockPvzsRepo is an autogenerated mock type for the PvzsRepo type
type MockPvzsRepo struct {
	mock.Mock
}

type MockPvzsRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPvzsRepo) EXPECT() *MockPvzsRepo_Expecter {
	return &MockPvzsRepo_Expecter{mock: &_m.Mock}
}

// CloseReceptionInPvz provides a mock function for the type MockPvzsRepo
func (_mock *MockPvzsRepo) CloseReceptionInPvz(ctx context.Context, pvzId *uuid.UUID) error {
	ret := _mock.Called(ctx, pvzId)

	if len(ret) == 0 {
		panic("no return value specified for CloseReceptionInPvz")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *uuid.UUID) error); ok {
		r0 = returnFunc(ctx, pvzId)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockPvzsRepo_CloseReceptionInPvz_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CloseReceptionInPvz'
type MockPvzsRepo_CloseReceptionInPvz_Call struct {
	*mock.Call
}

// CloseReceptionInPvz is a helper method to define mock.On call
//   - ctx context.Context
//   - pvzId *uuid.UUID
func (_e *MockPvzsRepo_Expecter) CloseReceptionInPvz(ctx interface{}, pvzId interface{}) *MockPvzsRepo_CloseReceptionInPvz_Call {
	return &MockPvzsRepo_CloseReceptionInPvz_Call{Call: _e.mock.On("CloseReceptionInPvz", ctx, pvzId)}
}

func (_c *MockPvzsRepo_CloseReceptionInPvz_Call) Run(run func(ctx context.Context, pvzId *uuid.UUID)) *MockPvzsRepo_CloseReceptionInPvz_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(*uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockPvzsRepo_CloseReceptionInPvz_Call) Return(err error) *MockPvzsRepo_CloseReceptionInPvz_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockPvzsRepo_CloseReceptionInPvz_Call) RunAndReturn(run func(ctx context.Context, pvzId *uuid.UUID) error) *MockPvzsRepo_CloseReceptionInPvz_Call {
	_c.Call.Return(run)
	return _c
}

// CreatePVZ provides a mock function for the type MockPvzsRepo
func (_mock *MockPvzsRepo) CreatePVZ(ctx context.Context, pvz *domain.Pvz) (*domain.Pvz, error) {
	ret := _mock.Called(ctx, pvz)

	if len(ret) == 0 {
		panic("no return value specified for CreatePVZ")
	}

	var r0 *domain.Pvz
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *domain.Pvz) (*domain.Pvz, error)); ok {
		return returnFunc(ctx, pvz)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *domain.Pvz) *domain.Pvz); ok {
		r0 = returnFunc(ctx, pvz)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Pvz)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *domain.Pvz) error); ok {
		r1 = returnFunc(ctx, pvz)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPvzsRepo_CreatePVZ_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePVZ'
type MockPvzsRepo_CreatePVZ_Call struct {
	*mock.Call
}

// CreatePVZ is a helper method to define mock.On call
//   - ctx context.Context
//   - pvz *domain.Pvz
func (_e *MockPvzsRepo_Expecter) CreatePVZ(ctx interface{}, pvz interface{}) *MockPvzsRepo_CreatePVZ_Call {
	return &MockPvzsRepo_CreatePVZ_Call{Call: _e.mock.On("CreatePVZ", ctx, pvz)}
}

func (_c *MockPvzsRepo_CreatePVZ_Call) Run(run func(ctx context.Context, pvz *domain.Pvz)) *MockPvzsRepo_CreatePVZ_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *domain.Pvz
		if args[1] != nil {
			arg1 = args[1].(*domain.Pvz)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockPvzsRepo_CreatePVZ_Call) Return(pvz1 *domain.Pvz, err error) *MockPvzsRepo_CreatePVZ_Call {
	_c.Call.Return(pvz1, err)
	return _c
}

func (_c *MockPvzsRepo_CreatePVZ_Call) RunAndReturn(run func(ctx context.Context, pvz *domain.Pvz) (*domain.Pvz, error)) *MockPvzsRepo_CreatePVZ_Call {
	_c.Call.Return(run)
	return _c
}

// CreateProduct provides a mock function for the type MockPvzsRepo
func (_mock *MockPvzsRepo) CreateProduct(ctx context.Context, prod *domain.Product) (*domain.Product, error) {
	ret := _mock.Called(ctx, prod)

	if len(ret) == 0 {
		panic("no return value specified for CreateProduct")
	}

	var r0 *domain.Product
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *domain.Product) (*domain.Product, error)); ok {
		return returnFunc(ctx, prod)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *domain.Product) *domain.Product); ok {
		r0 = returnFunc(ctx, prod)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Product)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *domain.Product) error); ok {
		r1 = returnFunc(ctx, prod)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPvzsRepo_CreateProduct_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateProduct'
type MockPvzsRepo_CreateProduct_Call struct {
	*mock.Call
}

// CreateProduct is a helper method to define mock.On call
//   - ctx context.Context
//   - prod *domain.Product
func (_e *MockPvzsRepo_Expecter) CreateProduct(ctx interface{}, prod interface{}) *MockPvzsRepo_CreateProduct_Call {
	return &MockPvzsRepo_CreateProduct_Call{Call: _e.mock.On("CreateProduct", ctx, prod)}
}

func (_c *MockPvzsRepo_CreateProduct_Call) Run(run func(ctx context.Context, prod *domain.Product)) *MockPvzsRepo_CreateProduct_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *domain.Product
		if args[1] != nil {
			arg1 = args[1].(*domain.Product)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockPvzsRepo_CreateProduct_Call) Return(product *domain.Product, err error) *MockPvzsRepo_CreateProduct_Call {
	_c.Call.Return(product, err)
	return _c
}

func (_c *MockPvzsRepo_CreateProduct_Call) RunAndReturn(run func(ctx context.Context, prod *domain.Product) (*domain.Product, error)) *MockPvzsRepo_CreateProduct_Call {
	_c.Call.Return(run)
	return _c
}

// CreateReception provides a mock function for the type MockPvzsRepo
func (_mock *MockPvzsRepo) CreateReception(ctx context.Context, rec *domain.Reception) (*domain.Reception, error) {
	ret := _mock.Called(ctx, rec)

	if len(ret) == 0 {
		panic("no return value specified for CreateReception")
	}

	var r0 *domain.Reception
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *domain.Reception) (*domain.Reception, error)); ok {
		return returnFunc(ctx, rec)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *domain.Reception) *domain.Reception); ok {
		r0 = returnFunc(ctx, rec)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Reception)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *domain.Reception) error); ok {
		r1 = returnFunc(ctx, rec)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPvzsRepo_CreateReception_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateReception'
type MockPvzsRepo_CreateReception_Call struct {
	*mock.Call
}

// CreateReception is a helper method to define mock.On call
//   - ctx context.Context
//   - rec *domain.Reception
func (_e *MockPvzsRepo_Expecter) CreateReception(ctx interface{}, rec interface{}) *MockPvzsRepo_CreateReception_Call {
	return &MockPvzsRepo_CreateReception_Call{Call: _e.mock.On("CreateReception", ctx, rec)}
}

func (_c *MockPvzsRepo_CreateReception_Call) Run(run func(ctx context.Context, rec *domain.Reception)) *MockPvzsRepo_CreateReception_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *domain.Reception
		if args[1] != nil {
			arg1 = args[1].(*domain.Reception)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockPvzsRepo_CreateReception_Call) Return(reception *domain.Reception, err error) *MockPvzsRepo_CreateReception_Call {
	_c.Call.Return(reception, err)
	return _c
}

func (_c *MockPvzsRepo_CreateReception_Call) RunAndReturn(run func(ctx context.Context, rec *domain.Reception) (*domain.Reception, error)) *MockPvzsRepo_CreateReception_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteLastProduct provides a mock function for the type MockPvzsRepo
func (_mock *MockPvzsRepo) DeleteLastProduct(ctx context.Context, pvzId *uuid.UUID) error {
	ret := _mock.Called(ctx, pvzId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteLastProduct")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *uuid.UUID) error); ok {
		r0 = returnFunc(ctx, pvzId)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockPvzsRepo_DeleteLastProduct_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteLastProduct'
type MockPvzsRepo_DeleteLastProduct_Call struct {
	*mock.Call
}

// DeleteLastProduct is a helper method to define mock.On call
//   - ctx context.Context
//   - pvzId *uuid.UUID
func (_e *MockPvzsRepo_Expecter) DeleteLastProduct(ctx interface{}, pvzId interface{}) *MockPvzsRepo_DeleteLastProduct_Call {
	return &MockPvzsRepo_DeleteLastProduct_Call{Call: _e.mock.On("DeleteLastProduct", ctx, pvzId)}
}

func (_c *MockPvzsRepo_DeleteLastProduct_Call) Run(run func(ctx context.Context, pvzId *uuid.UUID)) *MockPvzsRepo_DeleteLastProduct_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(*uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockPvzsRepo_DeleteLastProduct_Call) Return(err error) *MockPvzsRepo_DeleteLastProduct_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockPvzsRepo_DeleteLastProduct_Call) RunAndReturn(run func(ctx context.Context, pvzId *uuid.UUID) error) *MockPvzsRepo_DeleteLastProduct_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllPvzs provides a mock function for the type MockPvzsRepo
func (_mock *MockPvzsRepo) GetAllPvzs(ctx context.Context) ([]*domain.Pvz, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllPvzs")
	}

	var r0 []*domain.Pvz
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]*domain.Pvz, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []*domain.Pvz); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Pvz)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPvzsRepo_GetAllPvzs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllPvzs'
type MockPvzsRepo_GetAllPvzs_Call struct {
	*mock.Call
}

// GetAllPvzs is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockPvzsRepo_Expecter) GetAllPvzs(ctx interface{}) *MockPvzsRepo_GetAllPvzs_Call {
	return &MockPvzsRepo_GetAllPvzs_Call{Call: _e.mock.On("GetAllPvzs", ctx)}
}

func (_c *MockPvzsRepo_GetAllPvzs_Call) Run(run func(ctx context.Context)) *MockPvzsRepo_GetAllPvzs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockPvzsRepo_GetAllPvzs_Call) Return(pvzs []*domain.Pvz, err error) *MockPvzsRepo_GetAllPvzs_Call {
	_c.Call.Return(pvzs, err)
	return _c
}

func (_c *MockPvzsRepo_GetAllPvzs_Call) RunAndReturn(run func(ctx context.Context) ([]*domain.Pvz, error)) *MockPvzsRepo_GetAllPvzs_Call {
	_c.Call.Return(run)
	return _c
}

// GetPvzsData provides a mock function for the type MockPvzsRepo
func (_mock *MockPvzsRepo) GetPvzsData(ctx context.Context, params *domain.PvzsReadParams) ([]*domain.PvzReceptions, error) {
	ret := _mock.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for GetPvzsData")
	}

	var r0 []*domain.PvzReceptions
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *domain.PvzsReadParams) ([]*domain.PvzReceptions, error)); ok {
		return returnFunc(ctx, params)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *domain.PvzsReadParams) []*domain.PvzReceptions); ok {
		r0 = returnFunc(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.PvzReceptions)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *domain.PvzsReadParams) error); ok {
		r1 = returnFunc(ctx, params)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPvzsRepo_GetPvzsData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPvzsData'
type MockPvzsRepo_GetPvzsData_Call struct {
	*mock.Call
}

// GetPvzsData is a helper method to define mock.On call
//   - ctx context.Context
//   - params *domain.PvzsReadParams
func (_e *MockPvzsRepo_Expecter) GetPvzsData(ctx interface{}, params interface{}) *MockPvzsRepo_GetPvzsData_Call {
	return &MockPvzsRepo_GetPvzsData_Call{Call: _e.mock.On("GetPvzsData", ctx, params)}
}

func (_c *MockPvzsRepo_GetPvzsData_Call) Run(run func(ctx context.Context, params *domain.PvzsReadParams)) *MockPvzsRepo_GetPvzsData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *domain.PvzsReadParams
		if args[1] != nil {
			arg1 = args[1].(*domain.PvzsReadParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockPvzsRepo_GetPvzsData_Call) Return(pvzReceptionss []*domain.PvzReceptions, err error) *MockPvzsRepo_GetPvzsData_Call {
	_c.Call.Return(pvzReceptionss, err)
	return _c
}

func (_c *MockPvzsRepo_GetPvzsData_Call) RunAndReturn(run func(ctx context.Context, params *domain.PvzsReadParams) ([]*domain.PvzReceptions, error)) *MockPvzsRepo_GetPvzsData_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAuthRepo creates a new instance of MockAuthRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAuthRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAuthRepo {
	mock := &MockAuthRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockAuthRepo is an autogenerated mock type for the AuthRepo type
type MockAuthRepo struct {
	mock.Mock
}

type MockAuthRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAuthRepo) EXPECT() *MockAuthRepo_Expecter {
	return &MockAuthRepo_Expecter{mock: &_m.Mock}
}

// CreateUser provides a mock function for the type MockAuthRepo
func (_mock *MockAuthRepo) CreateUser(ctx context.Context, user *auth.User) (*auth.User, error) {
	ret := _mock.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 *auth.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *auth.User) (*auth.User, error)); ok {
		return returnFunc(ctx, user)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *auth.User) *auth.User); ok {
		r0 = returnFunc(ctx, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *auth.User) error); ok {
		r1 = returnFunc(ctx, user)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAuthRepo_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type MockAuthRepo_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - user *auth.User
func (_e *MockAuthRepo_Expecter) CreateUser(ctx interface{}, user interface{}) *MockAuthRepo_CreateUser_Call {
	return &MockAuthRepo_CreateUser_Call{Call: _e.mock.On("CreateUser", ctx, user)}
}

func (_c *MockAuthRepo_CreateUser_Call) Run(run func(ctx context.Context, user *auth.User)) *MockAuthRepo_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *auth.User
		if args[1] != nil {
			arg1 = args[1].(*auth.User)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockAuthRepo_CreateUser_Call) Return(user1 *auth.User, err error) *MockAuthRepo_CreateUser_Call {
	_c.Call.Return(user1, err)
	return _c
}

func (_c *MockAuthRepo_CreateUser_Call) RunAndReturn(run func(ctx context.Context, user *auth.User) (*auth.User, error)) *MockAuthRepo_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// SaveRefreshToken provides a mock function for the type MockAuthRepo
func (_mock *MockAuthRepo) SaveRefreshToken(ctx context.Context, rToken *auth.RefreshToken) error {
	ret := _mock.Called(ctx, rToken)

	if len(ret) == 0 {
		panic("no return value specified for SaveRefreshToken")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *auth.RefreshToken) error); ok {
		r0 = returnFunc(ctx, rToken)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockAuthRepo_SaveRefreshToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveRefreshToken'
type MockAuthRepo_SaveRefreshToken_Call struct {
	*mock.Call
}

// SaveRefreshToken is a helper method to define mock.On call
//   - ctx context.Context
//   - rToken *auth.RefreshToken
func (_e *MockAuthRepo_Expecter) SaveRefreshToken(ctx interface{}, rToken interface{}) *MockAuthRepo_SaveRefreshToken_Call {
	return &MockAuthRepo_SaveRefreshToken_Call{Call: _e.mock.On("SaveRefreshToken", ctx, rToken)}
}

func (_c *MockAuthRepo_SaveRefreshToken_Call) Run(run func(ctx context.Context, rToken *auth.RefreshToken)) *MockAuthRepo_SaveRefreshToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *auth.RefreshToken
		if args[1] != nil {
			arg1 = args[1].(*auth.RefreshToken)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockAuthRepo_SaveRefreshToken_Call) Return(err error) *MockAuthRepo_SaveRefreshToken_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockAuthRepo_SaveRefreshToken_Call) RunAndReturn(run func(ctx context.Context, rToken *auth.RefreshToken) error) *MockAuthRepo_SaveRefreshToken_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUserRefreshToken provides a mock function for the type MockAuthRepo
func (_mock *MockAuthRepo) UpdateUserRefreshToken(ctx context.Context, usedHash []byte, newToken *auth.RefreshToken) error {
	ret := _mock.Called(ctx, usedHash, newToken)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserRefreshToken")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []byte, *auth.RefreshToken) error); ok {
		r0 = returnFunc(ctx, usedHash, newToken)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockAuthRepo_UpdateUserRefreshToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUserRefreshToken'
type MockAuthRepo_UpdateUserRefreshToken_Call struct {
	*mock.Call
}

// UpdateUserRefreshToken is a helper method to define mock.On call
//   - ctx context.Context
//   - usedHash []byte
//   - newToken *auth.RefreshToken
func (_e *MockAuthRepo_Expecter) UpdateUserRefreshToken(ctx interface{}, usedHash interface{}, newToken interface{}) *MockAuthRepo_UpdateUserRefreshToken_Call {
	return &MockAuthRepo_UpdateUserRefreshToken_Call{Call: _e.mock.On("UpdateUserRefreshToken", ctx, usedHash, newToken)}
}

func (_c *MockAuthRepo_UpdateUserRefreshToken_Call) Run(run func(ctx context.Context, usedHash []byte, newToken *auth.RefreshToken)) *MockAuthRepo_UpdateUserRefreshToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []byte
		if args[1] != nil {
			arg1 = args[1].([]byte)
		}
		var arg2 *auth.RefreshToken
		if args[2] != nil {
			arg2 = args[2].(*auth.RefreshToken)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockAuthRepo_UpdateUserRefreshToken_Call) Return(err error) *MockAuthRepo_UpdateUserRefreshToken_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockAuthRepo_UpdateUserRefreshToken_Call) RunAndReturn(run func(ctx context.Context, usedHash []byte, newToken *auth.RefreshToken) error) *MockAuthRepo_UpdateUserRefreshToken_Call {
	_c.Call.Return(run)
	return _c
}

// UserByEmail provides a mock function for the type MockAuthRepo
func (_mock *MockAuthRepo) UserByEmail(ctx context.Context, email string) (*auth.User, error) {
	ret := _mock.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for UserByEmail")
	}

	var r0 *auth.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*auth.User, error)); ok {
		return returnFunc(ctx, email)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *auth.User); ok {
		r0 = returnFunc(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, email)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAuthRepo_UserByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UserByEmail'
type MockAuthRepo_UserByEmail_Call struct {
	*mock.Call
}

// UserByEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *MockAuthRepo_Expecter) UserByEmail(ctx interface{}, email interface{}) *MockAuthRepo_UserByEmail_Call {
	return &MockAuthRepo_UserByEmail_Call{Call: _e.mock.On("UserByEmail", ctx, email)}
}

func (_c *MockAuthRepo_UserByEmail_Call) Run(run func(ctx context.Context, email string)) *MockAuthRepo_UserByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockAuthRepo_UserByEmail_Call) Return(user *auth.User, err error) *MockAuthRepo_UserByEmail_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockAuthRepo_UserByEmail_Call) RunAndReturn(run func(ctx context.Context, email string) (*auth.User, error)) *MockAuthRepo_UserByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// UserRoleAndRefreshToken provides a mock function for the type MockAuthRepo
func (_mock *MockAuthRepo) UserRoleAndRefreshToken(ctx context.Context, tokenHash []byte) (*auth.UserRoleAndRToken, error) {
	ret := _mock.Called(ctx, tokenHash)

	if len(ret) == 0 {
		panic("no return value specified for UserRoleAndRefreshToken")
	}

	var r0 *auth.UserRoleAndRToken
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []byte) (*auth.UserRoleAndRToken, error)); ok {
		return returnFunc(ctx, tokenHash)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []byte) *auth.UserRoleAndRToken); ok {
		r0 = returnFunc(ctx, tokenHash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth.UserRoleAndRToken)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []byte) error); ok {
		r1 = returnFunc(ctx, tokenHash)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAuthRepo_UserRoleAndRefreshToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UserRoleAndRefreshToken'
type MockAuthRepo_UserRoleAndRefreshToken_Call struct {
	*mock.Call
}

// UserRoleAndRefreshToken is a helper method to define mock.On call
//   - ctx context.Context
//   - tokenHash []byte
func (_e *MockAuthRepo_Expecter) UserRoleAndRefreshToken(ctx interface{}, tokenHash interface{}) *MockAuthRepo_UserRoleAndRefreshToken_Call {
	return &MockAuthRepo_UserRoleAndRefreshToken_Call{Call: _e.mock.On("UserRoleAndRefreshToken", ctx, tokenHash)}
}

func (_c *MockAuthRepo_UserRoleAndRefreshToken_Call) Run(run func(ctx context.Context, tokenHash []byte)) *MockAuthRepo_UserRoleAndRefreshToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []byte
		if args[1] != nil {
			arg1 = args[1].([]byte)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockAuthRepo_UserRoleAndRefreshToken_Call) Return(userRoleAndRToken *auth.UserRoleAndRToken, err error) *MockAuthRepo_UserRoleAndRefreshToken_Call {
	_c.Call.Return(userRoleAndRToken, err)
	return _c
}

func (_c *MockAuthRepo_UserRoleAndRefreshToken_Call) RunAndReturn(run func(ctx context.Context, tokenHash []byte) (*auth.UserRoleAndRToken, error)) *MockAuthRepo_UserRoleAndRefreshToken_Call {
	_c.Call.Return(run)
	return _c
}
