// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package servicemocks

import (
	"context"

	"github.com/google/uuid"
	"github.com/shrtyk/avito-pvz-test-assignment/internal/core/domain"
	mock "github.com/stretchr/testify/mock"
)

// NewMockService creates a new instance of MockService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockService {
	mock := &MockService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockService is an autogenerated mock type for the Service type
type MockService struct {
	mock.Mock
}

type MockService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockService) EXPECT() *MockService_Expecter {
	return &MockService_Expecter{mock: &_m.Mock}
}

// AddProductPVZ provides a mock function for the type MockService
func (_mock *MockService) AddProductPVZ(ctx context.Context, prod *domain.Product) (*domain.Product, error) {
	ret := _mock.Called(ctx, prod)

	if len(ret) == 0 {
		panic("no return value specified for AddProductPVZ")
	}

	var r0 *domain.Product
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *domain.Product) (*domain.Product, error)); ok {
		return returnFunc(ctx, prod)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *domain.Product) *domain.Product); ok {
		r0 = returnFunc(ctx, prod)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Product)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *domain.Product) error); ok {
		r1 = returnFunc(ctx, prod)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockService_AddProductPVZ_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddProductPVZ'
type MockService_AddProductPVZ_Call struct {
	*mock.Call
}

// AddProductPVZ is a helper method to define mock.On call
//   - ctx context.Context
//   - prod *domain.Product
func (_e *MockService_Expecter) AddProductPVZ(ctx interface{}, prod interface{}) *MockService_AddProductPVZ_Call {
	return &MockService_AddProductPVZ_Call{Call: _e.mock.On("AddProductPVZ", ctx, prod)}
}

func (_c *MockService_AddProductPVZ_Call) Run(run func(ctx context.Context, prod *domain.Product)) *MockService_AddProductPVZ_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *domain.Product
		if args[1] != nil {
			arg1 = args[1].(*domain.Product)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockService_AddProductPVZ_Call) Return(product *domain.Product, err error) *MockService_AddProductPVZ_Call {
	_c.Call.Return(product, err)
	return _c
}

func (_c *MockService_AddProductPVZ_Call) RunAndReturn(run func(ctx context.Context, prod *domain.Product) (*domain.Product, error)) *MockService_AddProductPVZ_Call {
	_c.Call.Return(run)
	return _c
}

// CloseReceptionInPvz provides a mock function for the type MockService
func (_mock *MockService) CloseReceptionInPvz(ctx context.Context, pvzId *uuid.UUID) error {
	ret := _mock.Called(ctx, pvzId)

	if len(ret) == 0 {
		panic("no return value specified for CloseReceptionInPvz")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *uuid.UUID) error); ok {
		r0 = returnFunc(ctx, pvzId)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockService_CloseReceptionInPvz_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CloseReceptionInPvz'
type MockService_CloseReceptionInPvz_Call struct {
	*mock.Call
}

// CloseReceptionInPvz is a helper method to define mock.On call
//   - ctx context.Context
//   - pvzId *uuid.UUID
func (_e *MockService_Expecter) CloseReceptionInPvz(ctx interface{}, pvzId interface{}) *MockService_CloseReceptionInPvz_Call {
	return &MockService_CloseReceptionInPvz_Call{Call: _e.mock.On("CloseReceptionInPvz", ctx, pvzId)}
}

func (_c *MockService_CloseReceptionInPvz_Call) Run(run func(ctx context.Context, pvzId *uuid.UUID)) *MockService_CloseReceptionInPvz_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(*uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockService_CloseReceptionInPvz_Call) Return(err error) *MockService_CloseReceptionInPvz_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockService_CloseReceptionInPvz_Call) RunAndReturn(run func(ctx context.Context, pvzId *uuid.UUID) error) *MockService_CloseReceptionInPvz_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteLastProductPvz provides a mock function for the type MockService
func (_mock *MockService) DeleteLastProductPvz(ctx context.Context, pvzId *uuid.UUID) error {
	ret := _mock.Called(ctx, pvzId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteLastProductPvz")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *uuid.UUID) error); ok {
		r0 = returnFunc(ctx, pvzId)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockService_DeleteLastProductPvz_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteLastProductPvz'
type MockService_DeleteLastProductPvz_Call struct {
	*mock.Call
}

// DeleteLastProductPvz is a helper method to define mock.On call
//   - ctx context.Context
//   - pvzId *uuid.UUID
func (_e *MockService_Expecter) DeleteLastProductPvz(ctx interface{}, pvzId interface{}) *MockService_DeleteLastProductPvz_Call {
	return &MockService_DeleteLastProductPvz_Call{Call: _e.mock.On("DeleteLastProductPvz", ctx, pvzId)}
}

func (_c *MockService_DeleteLastProductPvz_Call) Run(run func(ctx context.Context, pvzId *uuid.UUID)) *MockService_DeleteLastProductPvz_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(*uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockService_DeleteLastProductPvz_Call) Return(err error) *MockService_DeleteLastProductPvz_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockService_DeleteLastProductPvz_Call) RunAndReturn(run func(ctx context.Context, pvzId *uuid.UUID) error) *MockService_DeleteLastProductPvz_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllPvzs provides a mock function for the type MockService
func (_mock *MockService) GetAllPvzs(ctx context.Context) ([]*domain.Pvz, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllPvzs")
	}

	var r0 []*domain.Pvz
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]*domain.Pvz, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []*domain.Pvz); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Pvz)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockService_GetAllPvzs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllPvzs'
type MockService_GetAllPvzs_Call struct {
	*mock.Call
}

// GetAllPvzs is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockService_Expecter) GetAllPvzs(ctx interface{}) *MockService_GetAllPvzs_Call {
	return &MockService_GetAllPvzs_Call{Call: _e.mock.On("GetAllPvzs", ctx)}
}

func (_c *MockService_GetAllPvzs_Call) Run(run func(ctx context.Context)) *MockService_GetAllPvzs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockService_GetAllPvzs_Call) Return(pvzs []*domain.Pvz, err error) *MockService_GetAllPvzs_Call {
	_c.Call.Return(pvzs, err)
	return _c
}

func (_c *MockService_GetAllPvzs_Call) RunAndReturn(run func(ctx context.Context) ([]*domain.Pvz, error)) *MockService_GetAllPvzs_Call {
	_c.Call.Return(run)
	return _c
}

// GetPvzsData provides a mock function for the type MockService
func (_mock *MockService) GetPvzsData(ctx context.Context, params *domain.PvzsReadParams) ([]*domain.PvzReceptions, error) {
	ret := _mock.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for GetPvzsData")
	}

	var r0 []*domain.PvzReceptions
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *domain.PvzsReadParams) ([]*domain.PvzReceptions, error)); ok {
		return returnFunc(ctx, params)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *domain.PvzsReadParams) []*domain.PvzReceptions); ok {
		r0 = returnFunc(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.PvzReceptions)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *domain.PvzsReadParams) error); ok {
		r1 = returnFunc(ctx, params)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockService_GetPvzsData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPvzsData'
type MockService_GetPvzsData_Call struct {
	*mock.Call
}

// GetPvzsData is a helper method to define mock.On call
//   - ctx context.Context
//   - params *domain.PvzsReadParams
func (_e *MockService_Expecter) GetPvzsData(ctx interface{}, params interface{}) *MockService_GetPvzsData_Call {
	return &MockService_GetPvzsData_Call{Call: _e.mock.On("GetPvzsData", ctx, params)}
}

func (_c *MockService_GetPvzsData_Call) Run(run func(ctx context.Context, params *domain.PvzsReadParams)) *MockService_GetPvzsData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *domain.PvzsReadParams
		if args[1] != nil {
			arg1 = args[1].(*domain.PvzsReadParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockService_GetPvzsData_Call) Return(pvzReceptionss []*domain.PvzReceptions, err error) *MockService_GetPvzsData_Call {
	_c.Call.Return(pvzReceptionss, err)
	return _c
}

func (_c *MockService_GetPvzsData_Call) RunAndReturn(run func(ctx context.Context, params *domain.PvzsReadParams) ([]*domain.PvzReceptions, error)) *MockService_GetPvzsData_Call {
	_c.Call.Return(run)
	return _c
}

// NewPVZ provides a mock function for the type MockService
func (_mock *MockService) NewPVZ(ctx context.Context, pvz *domain.Pvz) (*domain.Pvz, error) {
	ret := _mock.Called(ctx, pvz)

	if len(ret) == 0 {
		panic("no return value specified for NewPVZ")
	}

	var r0 *domain.Pvz
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *domain.Pvz) (*domain.Pvz, error)); ok {
		return returnFunc(ctx, pvz)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *domain.Pvz) *domain.Pvz); ok {
		r0 = returnFunc(ctx, pvz)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Pvz)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *domain.Pvz) error); ok {
		r1 = returnFunc(ctx, pvz)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockService_NewPVZ_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewPVZ'
type MockService_NewPVZ_Call struct {
	*mock.Call
}

// NewPVZ is a helper method to define mock.On call
//   - ctx context.Context
//   - pvz *domain.Pvz
func (_e *MockService_Expecter) NewPVZ(ctx interface{}, pvz interface{}) *MockService_NewPVZ_Call {
	return &MockService_NewPVZ_Call{Call: _e.mock.On("NewPVZ", ctx, pvz)}
}

func (_c *MockService_NewPVZ_Call) Run(run func(ctx context.Context, pvz *domain.Pvz)) *MockService_NewPVZ_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *domain.Pvz
		if args[1] != nil {
			arg1 = args[1].(*domain.Pvz)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockService_NewPVZ_Call) Return(pvz1 *domain.Pvz, err error) *MockService_NewPVZ_Call {
	_c.Call.Return(pvz1, err)
	return _c
}

func (_c *MockService_NewPVZ_Call) RunAndReturn(run func(ctx context.Context, pvz *domain.Pvz) (*domain.Pvz, error)) *MockService_NewPVZ_Call {
	_c.Call.Return(run)
	return _c
}

// OpenNewPVZReception provides a mock function for the type MockService
func (_mock *MockService) OpenNewPVZReception(ctx context.Context, rec *domain.Reception) (*domain.Reception, error) {
	ret := _mock.Called(ctx, rec)

	if len(ret) == 0 {
		panic("no return value specified for OpenNewPVZReception")
	}

	var r0 *domain.Reception
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *domain.Reception) (*domain.Reception, error)); ok {
		return returnFunc(ctx, rec)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *domain.Reception) *domain.Reception); ok {
		r0 = returnFunc(ctx, rec)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Reception)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *domain.Reception) error); ok {
		r1 = returnFunc(ctx, rec)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockService_OpenNewPVZReception_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OpenNewPVZReception'
type MockService_OpenNewPVZReception_Call struct {
	*mock.Call
}

// OpenNewPVZReception is a helper method to define mock.On call
//   - ctx context.Context
//   - rec *domain.Reception
func (_e *MockService_Expecter) OpenNewPVZReception(ctx interface{}, rec interface{}) *MockService_OpenNewPVZReception_Call {
	return &MockService_OpenNewPVZReception_Call{Call: _e.mock.On("OpenNewPVZReception", ctx, rec)}
}

func (_c *MockService_OpenNewPVZReception_Call) Run(run func(ctx context.Context, rec *domain.Reception)) *MockService_OpenNewPVZReception_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *domain.Reception
		if args[1] != nil {
			arg1 = args[1].(*domain.Reception)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockService_OpenNewPVZReception_Call) Return(reception *domain.Reception, err error) *MockService_OpenNewPVZReception_Call {
	_c.Call.Return(reception, err)
	return _c
}

func (_c *MockService_OpenNewPVZReception_Call) RunAndReturn(run func(ctx context.Context, rec *domain.Reception) (*domain.Reception, error)) *MockService_OpenNewPVZReception_Call {
	_c.Call.Return(run)
	return _c
}
