// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package authmocks

import (
	"github.com/shrtyk/avito-pvz-test-assignment/internal/core/domain/auth"
	mock "github.com/stretchr/testify/mock"
)

// NewMockAuthService creates a new instance of MockAuthService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAuthService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAuthService {
	mock := &MockAuthService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockAuthService is an autogenerated mock type for the AuthService type
type MockAuthService struct {
	mock.Mock
}

type MockAuthService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAuthService) EXPECT() *MockAuthService_Expecter {
	return &MockAuthService_Expecter{mock: &_m.Mock}
}

// Fingerprint provides a mock function for the type MockAuthService
func (_mock *MockAuthService) Fingerprint(rToken *auth.RefreshTokenData) string {
	ret := _mock.Called(rToken)

	if len(ret) == 0 {
		panic("no return value specified for Fingerprint")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func(*auth.RefreshTokenData) string); ok {
		r0 = returnFunc(rToken)
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockAuthService_Fingerprint_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Fingerprint'
type MockAuthService_Fingerprint_Call struct {
	*mock.Call
}

// Fingerprint is a helper method to define mock.On call
//   - rToken *auth.RefreshTokenData
func (_e *MockAuthService_Expecter) Fingerprint(rToken interface{}) *MockAuthService_Fingerprint_Call {
	return &MockAuthService_Fingerprint_Call{Call: _e.mock.On("Fingerprint", rToken)}
}

func (_c *MockAuthService_Fingerprint_Call) Run(run func(rToken *auth.RefreshTokenData)) *MockAuthService_Fingerprint_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *auth.RefreshTokenData
		if args[0] != nil {
			arg0 = args[0].(*auth.RefreshTokenData)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockAuthService_Fingerprint_Call) Return(s string) *MockAuthService_Fingerprint_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockAuthService_Fingerprint_Call) RunAndReturn(run func(rToken *auth.RefreshTokenData) string) *MockAuthService_Fingerprint_Call {
	_c.Call.Return(run)
	return _c
}

// GenerateAccessToken provides a mock function for the type MockAuthService
func (_mock *MockAuthService) GenerateAccessToken(tokenData auth.AccessTokenData) (string, error) {
	ret := _mock.Called(tokenData)

	if len(ret) == 0 {
		panic("no return value specified for GenerateAccessToken")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(auth.AccessTokenData) (string, error)); ok {
		return returnFunc(tokenData)
	}
	if returnFunc, ok := ret.Get(0).(func(auth.AccessTokenData) string); ok {
		r0 = returnFunc(tokenData)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(auth.AccessTokenData) error); ok {
		r1 = returnFunc(tokenData)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAuthService_GenerateAccessToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateAccessToken'
type MockAuthService_GenerateAccessToken_Call struct {
	*mock.Call
}

// GenerateAccessToken is a helper method to define mock.On call
//   - tokenData auth.AccessTokenData
func (_e *MockAuthService_Expecter) GenerateAccessToken(tokenData interface{}) *MockAuthService_GenerateAccessToken_Call {
	return &MockAuthService_GenerateAccessToken_Call{Call: _e.mock.On("GenerateAccessToken", tokenData)}
}

func (_c *MockAuthService_GenerateAccessToken_Call) Run(run func(tokenData auth.AccessTokenData)) *MockAuthService_GenerateAccessToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 auth.AccessTokenData
		if args[0] != nil {
			arg0 = args[0].(auth.AccessTokenData)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockAuthService_GenerateAccessToken_Call) Return(s string, err error) *MockAuthService_GenerateAccessToken_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockAuthService_GenerateAccessToken_Call) RunAndReturn(run func(tokenData auth.AccessTokenData) (string, error)) *MockAuthService_GenerateAccessToken_Call {
	_c.Call.Return(run)
	return _c
}

// GenerateRefreshToken provides a mock function for the type MockAuthService
func (_mock *MockAuthService) GenerateRefreshToken(userID string, ua string, ip string) *auth.RefreshTokenData {
	ret := _mock.Called(userID, ua, ip)

	if len(ret) == 0 {
		panic("no return value specified for GenerateRefreshToken")
	}

	var r0 *auth.RefreshTokenData
	if returnFunc, ok := ret.Get(0).(func(string, string, string) *auth.RefreshTokenData); ok {
		r0 = returnFunc(userID, ua, ip)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth.RefreshTokenData)
		}
	}
	return r0
}

// MockAuthService_GenerateRefreshToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateRefreshToken'
type MockAuthService_GenerateRefreshToken_Call struct {
	*mock.Call
}

// GenerateRefreshToken is a helper method to define mock.On call
//   - userID string
//   - ua string
//   - ip string
func (_e *MockAuthService_Expecter) GenerateRefreshToken(userID interface{}, ua interface{}, ip interface{}) *MockAuthService_GenerateRefreshToken_Call {
	return &MockAuthService_GenerateRefreshToken_Call{Call: _e.mock.On("GenerateRefreshToken", userID, ua, ip)}
}

func (_c *MockAuthService_GenerateRefreshToken_Call) Run(run func(userID string, ua string, ip string)) *MockAuthService_GenerateRefreshToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockAuthService_GenerateRefreshToken_Call) Return(refreshTokenData *auth.RefreshTokenData) *MockAuthService_GenerateRefreshToken_Call {
	_c.Call.Return(refreshTokenData)
	return _c
}

func (_c *MockAuthService_GenerateRefreshToken_Call) RunAndReturn(run func(userID string, ua string, ip string) *auth.RefreshTokenData) *MockAuthService_GenerateRefreshToken_Call {
	_c.Call.Return(run)
	return _c
}

// GetTokenClaims provides a mock function for the type MockAuthService
func (_mock *MockAuthService) GetTokenClaims(token string) (*auth.AccessTokenClaims, error) {
	ret := _mock.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for GetTokenClaims")
	}

	var r0 *auth.AccessTokenClaims
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*auth.AccessTokenClaims, error)); ok {
		return returnFunc(token)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *auth.AccessTokenClaims); ok {
		r0 = returnFunc(token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth.AccessTokenClaims)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(token)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAuthService_GetTokenClaims_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTokenClaims'
type MockAuthService_GetTokenClaims_Call struct {
	*mock.Call
}

// GetTokenClaims is a helper method to define mock.On call
//   - token string
func (_e *MockAuthService_Expecter) GetTokenClaims(token interface{}) *MockAuthService_GetTokenClaims_Call {
	return &MockAuthService_GetTokenClaims_Call{Call: _e.mock.On("GetTokenClaims", token)}
}

func (_c *MockAuthService_GetTokenClaims_Call) Run(run func(token string)) *MockAuthService_GetTokenClaims_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockAuthService_GetTokenClaims_Call) Return(accessTokenClaims *auth.AccessTokenClaims, err error) *MockAuthService_GetTokenClaims_Call {
	_c.Call.Return(accessTokenClaims, err)
	return _c
}

func (_c *MockAuthService_GetTokenClaims_Call) RunAndReturn(run func(token string) (*auth.AccessTokenClaims, error)) *MockAuthService_GetTokenClaims_Call {
	_c.Call.Return(run)
	return _c
}
